/* LsysParser.java */
/* Generated By:JavaCC: Do not edit this line. LsysParser.java */
package drawing.parser;
import java.util.ArrayList;

/**
cd C:\work\git_tratsi\nals
C:\devtools\javacc-javacc-7.0.11\scripts\javacc.bat -OUTPUT_DIRECTORY:src\main\java\drawing\parser src\lsysData.jj
 */


public class LsysParser implements LsysParserConstants {

ArrayList al = new ArrayList();
ArrayList rules = new ArrayList();


  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    LsysParser parser = new LsysParser(System.in);
    parser.parse();
  }

  final public void parse() throws ParseException {
    ruleList();

}

  final protected void ruleList() throws ParseException {Token t = null;
    rule();
rules.add(al);
                al = new ArrayList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(COMMA);
      rule();
rules.add(al);
                al = new ArrayList();
    }

}

  final protected void rule() throws ParseException {Token t = null;
    t = jj_consume_token(IDENTIFIER);
al.add( t.image.toUpperCase()) ;
    t = jj_consume_token(EQUAL);
al.add( t.image) ;
    ruleBody();
}

  final protected void ruleBody() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHANGECOLOR:
      case PUSH:
      case POP:
      case WIDTHINCR:
      case WIDTHDECR:
      case DOUBLELENGTH:
      case HALFLENGTH:
      case RIGHT:
      case LEFT:
      case HRIGHT:
      case HLEFT:
      case IDENTIFIER:{
        ruleToken();
        break;
        }
      case MARK:
      case LABEL:{
        expr();

        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHANGECOLOR:
      case MARK:
      case LABEL:
      case PUSH:
      case POP:
      case WIDTHINCR:
      case WIDTHDECR:
      case DOUBLELENGTH:
      case HALFLENGTH:
      case RIGHT:
      case LEFT:
      case HRIGHT:
      case HLEFT:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
}

  final protected void ruleToken() throws ParseException {Token t =  null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHANGECOLOR:{
      t = jj_consume_token(CHANGECOLOR);
      break;
      }
    case PUSH:{
      t = jj_consume_token(PUSH);
      break;
      }
    case POP:{
      t = jj_consume_token(POP);
      break;
      }
    case WIDTHINCR:{
      t = jj_consume_token(WIDTHINCR);
      break;
      }
    case WIDTHDECR:{
      t = jj_consume_token(WIDTHDECR);
      break;
      }
    case DOUBLELENGTH:{
      t = jj_consume_token(DOUBLELENGTH);
      break;
      }
    case HALFLENGTH:{
      t = jj_consume_token(HALFLENGTH);
      break;
      }
    case RIGHT:{
      t = jj_consume_token(RIGHT);
      break;
      }
    case LEFT:{
      t = jj_consume_token(LEFT);
      break;
      }
    case HRIGHT:{
      t = jj_consume_token(HRIGHT);
      break;
      }
    case HLEFT:{
      t = jj_consume_token(HLEFT);
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (t!=null) al.add( t.image.toUpperCase()) ;
}

  final protected void expr() throws ParseException {Token t = null;
        String word = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MARK:{
      t = jj_consume_token(MARK);
      break;
      }
    case LABEL:{
      t = jj_consume_token(LABEL);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
word +=  t.image ;
    t = jj_consume_token(STRING_LITERAL);
word +=  t.image.substring(1,t.image.length()-1) ; // minus parens
                al.add(word);
}

  /** Generated Token Manager. */
  public LsysParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x800,0x5ef7c0,0x5ef7c0,0x5ef640,0x180,};
	}

  /** Constructor with InputStream. */
  public LsysParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LsysParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LsysParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LsysParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LsysParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LsysParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LsysParser(LsysParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LsysParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[24];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 5; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 24; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
